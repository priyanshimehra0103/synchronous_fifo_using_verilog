// Code your design here
module fifo_sync
  #(parameter DATA_WIDTH = 32, 
    parameter FIFO_DEPTH = 8
)(
    input clk,      // Clock signal
    input rst_n  // Reset (active high)
    input cs,    //Chip select
    input wr_en,    // Write enable
    input rd_en,    // Read enable
    input [DATA_WIDTH-1:0]  data_in,     // Data input
    output reg  [DATA_WIDTH-1:0]  data_out,    // Data output
    output full,     // FIFO full flag
    output empty     // FIFO empty flag
   );
  
  localparam FIFO_DEPTH_LOG= $clog2(FIFO_DEPTH);

  reg [DATA_WIDTH-1:0] fifo [0:FIFO_DEPTH-1]; // FIFO memory
  reg [FIFO_DEPTH_LOG:0]   write_pointer; // Write pointer
  reg [FIFO_DEPTH_LOG:0]   read_pointer; // Read pointer
  

    // Write Operation
  always @(posedge clk or negedge rst_n) 
    begin
      if (!rst_n) 
            write_pointer<= 0;
        else if (cs && wr_en && !full) begin
          fifo[write_pointer[FIFO_DEPTH_LOG-1:0]] <= data_in;
            write_pointer <= write_pointer + 1'b1;
        end
    end

    // Read Operation
  always @(posedge clk or negedge rst_n)
        begin
          if (!rst_n ) 
            read_pointer <= 0;
            dout   <= 0;
          else if (cs && rd_en && !empty) begin
            data_out <= fifo [read_pointer[FIFO_DEPTH_LOG-1:0]];
            read_pointer <= read_pointer + 1'b1;
        end
    end
      
      assign empty= (read_pointer==write_pointer);
  assign full= (read_pointer=={~write_pointer[FIFO_DEPTH_LOG], write_pointer[FIFO_DEPTH_LOG-1:0]});
      
      endmodule

   